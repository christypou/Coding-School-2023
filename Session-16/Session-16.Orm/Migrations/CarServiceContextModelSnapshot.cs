// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Session_16.Orm.Context;

#nullable disable

namespace Session16.Orm.Migrations
{
    [DbContext(typeof(CarServiceContext))]
    partial class CarServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibCarService.Car", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CarRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CarServiceCenterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("CarServiceCenterID");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("LibCarService.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarServiceCenterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.HasIndex("CarServiceCenterID");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("LibCarService.Engineer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarServiceCenterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("SalaryPerMonth")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.HasIndex("CarServiceCenterID");

                    b.HasIndex("ManagerID")
                        .IsUnique();

                    b.ToTable("Engineer", (string)null);
                });

            modelBuilder.Entity("LibCarService.Manager", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarServiceCenterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SalaryPerMonth")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("CarServiceCenterID");

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("LibCarService.MonthlyLedger", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarServiceCenterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Expenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Income")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CarServiceCenterID");

                    b.ToTable("MonthlyLedger");
                });

            modelBuilder.Entity("LibCarService.ServiceTask", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarServiceCenterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Hours")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ID");

                    b.HasIndex("CarServiceCenterID");

                    b.ToTable("Service Task", (string)null);
                });

            modelBuilder.Entity("LibCarService.Settings", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("LibCarService.TransactionLine", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarServiceCenterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EngineerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Hours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceTaskID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionsID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CarServiceCenterID");

                    b.HasIndex("EngineerID");

                    b.HasIndex("ServiceTaskID");

                    b.HasIndex("TransactionsID");

                    b.ToTable("transactionLine");
                });

            modelBuilder.Entity("LibCarService.Transactions", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarServiceCenterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ID");

                    b.HasIndex("CarServiceCenterID");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Session_11.CarServiceCenter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("SettingsID");

                    b.ToTable("CarServiceCenter");
                });

            modelBuilder.Entity("LibCarService.Car", b =>
                {
                    b.HasOne("Session_11.CarServiceCenter", null)
                        .WithMany("Cars")
                        .HasForeignKey("CarServiceCenterID");
                });

            modelBuilder.Entity("LibCarService.Customer", b =>
                {
                    b.HasOne("Session_11.CarServiceCenter", null)
                        .WithMany("Customers")
                        .HasForeignKey("CarServiceCenterID");
                });

            modelBuilder.Entity("LibCarService.Engineer", b =>
                {
                    b.HasOne("Session_11.CarServiceCenter", null)
                        .WithMany("Engineers")
                        .HasForeignKey("CarServiceCenterID");

                    b.HasOne("LibCarService.Manager", "Manager")
                        .WithOne("Engineer")
                        .HasForeignKey("LibCarService.Engineer", "ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("LibCarService.Manager", b =>
                {
                    b.HasOne("Session_11.CarServiceCenter", null)
                        .WithMany("Managers")
                        .HasForeignKey("CarServiceCenterID");
                });

            modelBuilder.Entity("LibCarService.MonthlyLedger", b =>
                {
                    b.HasOne("Session_11.CarServiceCenter", null)
                        .WithMany("MonthlyLedger")
                        .HasForeignKey("CarServiceCenterID");
                });

            modelBuilder.Entity("LibCarService.ServiceTask", b =>
                {
                    b.HasOne("Session_11.CarServiceCenter", null)
                        .WithMany("ServiceTasks")
                        .HasForeignKey("CarServiceCenterID");
                });

            modelBuilder.Entity("LibCarService.TransactionLine", b =>
                {
                    b.HasOne("Session_11.CarServiceCenter", null)
                        .WithMany("TransactionLines")
                        .HasForeignKey("CarServiceCenterID");

                    b.HasOne("LibCarService.Engineer", null)
                        .WithMany("Lines")
                        .HasForeignKey("EngineerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibCarService.ServiceTask", null)
                        .WithMany("Lines")
                        .HasForeignKey("ServiceTaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibCarService.Transactions", null)
                        .WithMany("Lines")
                        .HasForeignKey("TransactionsID");
                });

            modelBuilder.Entity("LibCarService.Transactions", b =>
                {
                    b.HasOne("Session_11.CarServiceCenter", "CarServiceCenter")
                        .WithMany("Transactions")
                        .HasForeignKey("CarServiceCenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibCarService.Car", "Car")
                        .WithOne("Transaction")
                        .HasForeignKey("LibCarService.Transactions", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibCarService.Customer", "Customer")
                        .WithOne("Transaction")
                        .HasForeignKey("LibCarService.Transactions", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibCarService.Manager", "Manager")
                        .WithOne("Transaction")
                        .HasForeignKey("LibCarService.Transactions", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("CarServiceCenter");

                    b.Navigation("Customer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Session_11.CarServiceCenter", b =>
                {
                    b.HasOne("LibCarService.Settings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("LibCarService.Car", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("LibCarService.Customer", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("LibCarService.Engineer", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("LibCarService.Manager", b =>
                {
                    b.Navigation("Engineer")
                        .IsRequired();

                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("LibCarService.ServiceTask", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("LibCarService.Transactions", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Session_11.CarServiceCenter", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Customers");

                    b.Navigation("Engineers");

                    b.Navigation("Managers");

                    b.Navigation("MonthlyLedger");

                    b.Navigation("ServiceTasks");

                    b.Navigation("TransactionLines");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
