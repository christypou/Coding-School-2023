@page "/customerlist/edit/{Id:int?}"
@using FuelStation.Model;
@using FuelStation.Model.Enums;
@using FuelStation.Web.Blazor.Shared.Customer;
@inject IJSRuntime jsRuntime
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>@title</h3>

@if (Customer == null) {
	<LoadingSpinner Type="LoadingSpinnerType.Border" />
} else {
	<EditForm Model="Customer" OnValidSubmit="OnSave">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="row">
			<div class="col-md-4">
				<label class="form-label">Name</label>
				<InputText class="form-control" @bind-Value="@Customer.Name" />
			</div>
		
			<div class="col-md-4">
				<label class="form-label">Surname</label>
				<InputText class="form-control" @bind-Value="@Customer.Surname" />
			</div>
			<div class="col-md-4">
				<label class="form-label">Card Number</label>					   
				<InputText class="form-control" @bind-Value="@Customer.CardNumber" @bind-Value:after="@(()=>checkCardNumber(Customer.CardNumber))"/>
			</div>
		</div>
		
		
		<div class="row mt-2">
			<div class="col">
				<button class="btn btn-success" type="submit">Save</button>
				<button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
			</div>
		</div>
	</EditForm>

}

@code {
	[Parameter] public int? Id { get; set; }
	CustomerEditDto Customer { get; set; }
	private List<CustomerListDto> customersList = new();
	string? title;
	protected override async Task OnInitializedAsync() {
		if (Id == null) {
			Customer = new();
			title = "Create Customer";
		} else {
			Customer = await httpClient.GetFromJsonAsync<CustomerEditDto>($"customer/{Id}");
			title = "Edit Customer";
		}
		customersList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
	}


	private void OnCancel() {
		navigationManager.NavigateTo("customerlist");
	}

	private async Task OnSave() {
		HttpResponseMessage? response = null;
		if (Id == null) {
			response = await httpClient.PostAsJsonAsync("customer", Customer);
		} else {
			response = await httpClient.PutAsJsonAsync("customer", Customer);
		}

		response.EnsureSuccessStatusCode();
		navigationManager.NavigateTo("customerlist");
	}
	async Task checkCardNumber(String cardNumber)
	{
		foreach(var customer in customersList)
		{
			if(cardNumber == customer.CardNumber)
			{
				var confirm = await jsRuntime.InvokeAsync<string>("alert", "This Card Number already exists!");
				Customer.CardNumber = "";
			}
		}
	}
}