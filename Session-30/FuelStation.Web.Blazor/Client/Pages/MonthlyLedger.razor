@page "/monthlyledger"
@using FuelStation.Model;
@using FuelStation.Web.Blazor.Shared;
@using FuelStation.Web.Blazor.Shared.Employee;
@using FuelStation.Web.Blazor.Shared.Item;
@using FuelStation.Web.Blazor.Shared.Transaction;
@inject IJSRuntime jsRuntime

@inject HttpClient httpClient


<h3>Monthly Ledger</h3>
<div class="row">
<div class="col-md-4">
<label class="form-label">Rent</label>
	</div>
</div>
	<div class="row">
<div class="col-md-4">
<InputNumber class="form-control" @bind-Value="@rent" />
</div>
<div class="col-md-4">
<button class="btn btn-success" @onclick="calculateLedger"> Save </button>
</div>
</div>
@if (isLoading) {
	<p>Loading...</p>
} else {
	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th>Year</th>
				<th>Month</th>
				<th>Income</th>
				<th>Expenses</th>
				<th>Total</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var monthlyLedger in monthlyLedgerList) {
				<tr>
					<td>@monthlyLedger.Year</td>
					<td>@monthlyLedger.Month</td>
					<td>@monthlyLedger.Income €</td>
					<td>@monthlyLedger.Expenses €</td>
					<td>@monthlyLedger.Total €</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {

	private List<EmployeeListDto> Employees = new();
	private List<TransactionListDto> Transactions = new();
	private List<TransactionListDto> Trans= new();
	bool isLoading { get; set; } = true;
	int year = 2023;
	int month = 1;
	int monthNow = DateTime.Now.Month;
	int yearNow = DateTime.Now.Year;
	decimal monthIncome;
	decimal monthExpenses;
	List<MonthlyLedgerDto> monthlyLedgerList = new List<MonthlyLedgerDto>();
	decimal rent =5000;
	private async void calculateLedger()
	{
		if (rent <= 0){
			var confirm = await jsRuntime.InvokeAsync<string>("alert", "Rent must be greater than 0");
			rent = 0;
		}
	monthlyLedgerList = new();
		for (int i = year; i <= yearNow; i++) {

			for (int j = 1; j <= 12; j++) {
				if (i == yearNow && j > monthNow) {
					break;
				}
				DateTime date = new DateTime(i, j, 1);
				MonthlyLedgerDto monthlyLedger = new MonthlyLedgerDto(date);
				monthIncome = CalculateMonthlyIncome(date);
				monthExpenses = CalculateMonthlyExpenses(date);
				monthlyLedger.UpdateLedger(monthIncome, monthExpenses);
				monthlyLedgerList.Add(monthlyLedger);
			}
		}
	}
	protected override async Task OnInitializedAsync() {
		await LoadItemsFromServer();
		for (int i = year; i <= yearNow; i++) {

			for (int j = 1; j <= 12; j++) {
				if (i == yearNow && j > monthNow) {
					break;
				}
				DateTime date = new DateTime(i, j, 1);
				MonthlyLedgerDto monthlyLedger = new MonthlyLedgerDto(date);
				monthIncome = CalculateMonthlyIncome(date);
				monthExpenses = CalculateMonthlyExpenses(date);
				monthlyLedger.UpdateLedger(monthIncome, monthExpenses);
				monthlyLedgerList.Add(monthlyLedger);
			}
		}
		isLoading = false;
	}
	private async Task LoadItemsFromServer() {
		Transactions = await httpClient.GetFromJsonAsync<List<TransactionListDto>>("transaction");
		Employees = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
		Trans = await httpClient.GetFromJsonAsync<List<TransactionListDto>>("MonthlyLedger");
	}
	private decimal CalculateMonthlyIncome(DateTime date) {
		int month = date.Month;
		int year = date.Year;
		decimal incomeSum = 0;
		List<TransactionListDto> transactionsThisMonth = Transactions.FindAll(c => c.Date.Month == month).FindAll(c => c.Date.Year == year).ToList();
		foreach (var transaction in transactionsThisMonth) {
			incomeSum += transaction.TotalValue;
		}
		return incomeSum;
	}
	private decimal CalculateMonthlyExpenses(DateTime date) {
		int month = date.Month;
		int year = date.Year;
		decimal salaries=0;
		decimal itemCostSum = 0;


		List<TransactionListDto> transactionsThisMonth2 = Transactions.FindAll(c => c.Date.Month == month).FindAll(c => c.Date.Year == year).ToList();
		foreach (var tran in Trans) {
			if (tran.Date.Month == date.Month)
			{
				foreach(var line in tran.TransactionLines)
				{
					itemCostSum += line.Quantity * line.ItemCost;
				}
			}
		}
		foreach (var employee in Employees)
		{
			//month?
			if ((employee.HireDateStart < date) && (date < employee.HireDateEnd))
			{
				salaries += employee.SalaryPerMonth;
			}
			
		}
		return itemCostSum + rent + salaries ;
	}
}