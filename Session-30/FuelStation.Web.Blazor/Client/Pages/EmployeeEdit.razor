@page "/employeelist/edit/{Id:int?}"
@using FuelStation.Model;
@using FuelStation.Model.Enums;
@using FuelStation.Web.Blazor.Shared.Employee;
@inject IJSRuntime jsRuntime
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>@title</h3>

@if (Employee == null) {
	<LoadingSpinner Type="LoadingSpinnerType.Border" />
} else {
	<EditForm Model="Employee" OnValidSubmit="OnSave">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="row">
			<div class="col-md-6">
				<label class="form-label">Name</label>
				<InputText class="form-control" @bind-Value="@Employee.Name" />
			</div>
		</div>
		<div class="row">
			<div class="col-md-6">
				<label class="form-label">Surname</label>
				<InputText class="form-control" @bind-Value="@Employee.Surname" />
			</div>
		</div>
		<div class="row">
			<div class="col-md-6">
				<label class="form-label">Employee Type</label>
				<InputSelect class="form-control" @bind-Value="Employee.EmployeeType" @bind-Value:after="@( ()=> checkEmployee(Employee.EmployeeType))">
					@foreach (var enumValue in Enum.GetValues<EmployeeType>()) {
						<option value="@enumValue">@enumValue</option>
					}
				</InputSelect>
			</div>
		</div>
		<div class="row">
			<div class="col-md-6">
				<label class="form-label">Salary Per Month</label>
				<InputNumber class="form-control" @bind-Value="@Employee.SalaryPerMonth"  />
			</div>
			<div class="col-md-3">
				<label class="form-label">Start date</label>
				<InputDate class="form-control" @bind-Value="@Employee.HireDateStart" />
			</div>
			<div class="col-md-3">
				<label class="form-label">End Date</label>
				<InputDate class="form-control" @bind-Value="@Employee.HireDateEnd" />
			</div>
		</div>
		<div class="row mt-2">
			<div class="col">
				<button class="btn btn-success"  type="submit">Save</button>
				<button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
			</div>
		</div>
	</EditForm>

}

@code {
	[Parameter] public int? Id { get; set; }
	EmployeeEditDto Employee { get; set; }
	
	private List<EmployeeListDto> employeeList = new();
	string? title;
	int countManagers, countStaff, countCashiers=0;
	protected override async Task OnInitializedAsync() {
		
		
	
		if (Id == null) {
			Employee = new();
			title = "Create Employee";
		} else {
			Employee = await httpClient.GetFromJsonAsync<EmployeeEditDto>($"employee/{Id}");
			title = "Edit Employee";
		}
		employeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
		Employee.HireDateEnd = DateTime.Now;
		Employee.HireDateStart = DateTime.Now;
		foreach (var employee in employeeList)
		{
			if (employee.EmployeeType.ToString() == "Manager")
			{
				countManagers++;
			}
			else if (employee.EmployeeType.ToString() == "Staff")
			{
				countStaff++;
			}
			else if (employee.EmployeeType.ToString() == "Cashier")
			{
				countCashiers++;
			}
		}
	}

	private void OnCancel() {
		navigationManager.NavigateTo("employeelist");
	}

	private async Task OnSave() {
		HttpResponseMessage? response = null;
		if (Id == null) {

			response = await httpClient.PostAsJsonAsync("employee", Employee);
		} else {
			response = await httpClient.PutAsJsonAsync("employee", Employee);
		}

		response.EnsureSuccessStatusCode();
		navigationManager.NavigateTo("employeelist");
	}
	async Task checkEmployee(EmployeeType type)
	{

		if (type.ToString() == "Manager")
		{
			if (countManagers >= 3)
			{

				var confirm = await jsRuntime.InvokeAsync<string>("alert", "Too many managers");
				//navigationManager.NavigateTo("employeelist");
				
			}
		}else if (type.ToString() == "Staff")
		{
			if (countStaff >= 10)
			{
				var confirm = await jsRuntime.InvokeAsync<string>("alert", "Too many managers");
				navigationManager.NavigateTo("employeelist");
			}
		}else if (type.ToString() == "Cashier")
		{
			if (countCashiers >= 4)
			{
				var confirm = await jsRuntime.InvokeAsync<string>("alert", "Too many managers");
				navigationManager.NavigateTo("employeelist");
			}
		}
	}
}